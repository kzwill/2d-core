import { TextAlign, TextBaseline, Pen } from './pen';
import { Point } from './point';
import { Padding } from './utils';
export declare enum KeydownType {
    None = -1,
    Document = 0,
    Canvas = 1
}
export interface Options {
    color?: string;
    activeColor?: string;
    activeBackground?: string;
    hoverColor?: string;
    hoverBackground?: string;
    anchorColor?: string;
    hoverAnchorColor?: string;
    anchorRadius?: number;
    anchorBackground?: string;
    dockColor?: string;
    dockPenColor?: string;
    dragColor?: string;
    animateColor?: string;
    textColor?: string;
    fontFamily?: string;
    fontSize?: number;
    lineHeight?: number;
    textAlign?: TextAlign;
    textBaseline?: TextBaseline;
    rotateCursor?: string;
    hoverCursor?: string;
    disableInput?: boolean;
    disableRotate?: boolean;
    disableSize?: boolean;
    disableAnchor?: boolean;
    autoAnchor?: boolean;
    autoAlignGrid?: boolean;
    disableEmptyLine?: boolean;
    disableRepeatLine?: boolean;
    disableScale?: boolean;
    disableTranslate?: boolean;
    disableDock?: boolean;
    disableLineDock?: boolean;
    moveConnectedLine?: boolean;
    minScale?: number;
    maxScale?: number;
    keydown?: KeydownType;
    background?: string;
    shadowOffsetX?: number;
    shadowOffsetY?: number;
    shadowBlur?: number;
    shadowColor?: string;
    globalAlpha?: number;
    grid?: boolean;
    gridColor?: string;
    gridSize?: number;
    rule?: boolean;
    ruleColor?: string;
    drawingLineName?: string;
    fromArrow?: string;
    toArrow?: string;
    autoPolyline?: boolean;
    interval?: number;
    animateInterval?: number;
    dragAllIn?: boolean;
    scroll?: boolean;
    uploadFn?: (file: File) => Promise<string>;
    uploadUrl?: string;
    uploadParams?: Record<string, any>;
    uploadHeaders?: Record<string, string>;
    disableRuleLine?: boolean;
    ruleLineColor?: string;
    defaultAnchors?: Point[];
    measureTextWidth?: boolean;
    mouseRightActive?: boolean;
    disableClipboard?: boolean;
    drawingLineLength?: number;
    disableTouchPadScale?: boolean;
    cdn?: string;
    x?: number;
    y?: number;
    width?: number;
    height?: number;
    polylineSpace?: number;
    defaultFormat?: Pen;
    domShapes?: string[];
    textFlip?: boolean;
    textRotate?: boolean;
    cacheLength?: number;
    unavailableKeys?: string[];
    activeLineDash?: number[];
    activeLineWidth?: number;
    activeGlobalAlpha?: number;
    diagramOptions?: {
        [key: string]: any;
    };
    strictScope?: boolean;
    padding?: Padding;
    resizeMode?: boolean;
}
export declare const defaultOptions: Options;
